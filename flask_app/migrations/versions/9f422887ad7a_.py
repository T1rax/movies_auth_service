"""empty message

Revision ID: 9f422887ad7a
Revises: 
Create Date: 2023-05-01 11:14:44.002976

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime
from dateutil.relativedelta import relativedelta


# revision identifiers, used by Alembic.
revision = "9f422887ad7a"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("login", sa.String(length=100), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(length=100), nullable=True),
        sa.Column("last_name", sa.String(length=100), nullable=True),
        sa.Column(
            "age_group",
            sa.Enum(
                "undefined",
                "0-17",
                "18-24",
                "25-34",
                "35-44",
                "45-64",
                "65+",
                name="age_groups",
            ),
            nullable=False,
        ),
        sa.Column("roles", sa.PickleType(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("login"),
    )

    op.create_table(
        "histories",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_device_type", sa.Text(), nullable=False),
        sa.Column("useragent", sa.String(length=500), nullable=False),
        sa.Column("remote_addr", sa.String(length=500), nullable=False),
        sa.Column("referrer", sa.String(length=500), nullable=True),
        sa.Column(
            "action", sa.Enum("login", "logout", name="actiontype"), nullable=True
        ),
        sa.Column(
            "timestamp", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column(
            "ptn_dadd", sa.Date(), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id", "ptn_dadd"),
        sa.UniqueConstraint("id", "ptn_dadd"),
        postgresql_partition_by="RANGE (ptn_dadd)",
    )
    with op.batch_alter_table("histories", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_histories_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "social_accounts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("social_id", sa.Text(), nullable=False),
        sa.Column("provider", sa.Text(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("social_id", "provider"),
    )
    # ### end Alembic commands ###

    # ### Custom created partitions ###
    ptn_start_date = datetime(2023, 1, 1)

    for i in range(12):
        ptn_year = ptn_start_date.strftime("%y")
        ptn_month = ptn_start_date.strftime("%m")
        ptn_start = ptn_start_date.strftime("%Y-%m-%d")
        ptn_end_date = ptn_start_date + relativedelta(months=1)
        ptn_end = ptn_end_date.strftime("%Y-%m-%d")

        partition_str = f"CREATE TABLE IF NOT EXISTS history_{ptn_year}_{ptn_month} PARTITION OF histories FOR VALUES FROM ('{ptn_start}') TO ('{ptn_end}')"

        op.execute(partition_str)

        ptn_start_date = ptn_end_date

    # ### end Custom created partitions ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("social_accounts")
    with op.batch_alter_table("histories", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_histories_user_id"))

    op.drop_table("histories")
    op.drop_table("users")
    # ### end Alembic commands ###
